// Code generated by MockGen. DO NOT EDIT.
// Source: checker.trpc.go

// Package pb_hub is a generated GoMock package.
package pb_hub

import (
	context "context"
	client "git.code.oa.com/trpc-go/trpc-go/client"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCheckService is a mock of CheckService interface
type MockCheckService struct {
	ctrl     *gomock.Controller
	recorder *MockCheckServiceMockRecorder
}

// MockCheckServiceMockRecorder is the mock recorder for MockCheckService
type MockCheckServiceMockRecorder struct {
	mock *MockCheckService
}

// NewMockCheckService creates a new mock instance
func NewMockCheckService(ctrl *gomock.Controller) *MockCheckService {
	mock := &MockCheckService{ctrl: ctrl}
	mock.recorder = &MockCheckServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCheckService) EXPECT() *MockCheckServiceMockRecorder {
	return m.recorder
}

// Health mocks base method
func (m *MockCheckService) Health(ctx context.Context, req *HealthRequest, rsp *HealthReply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", ctx, req, rsp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health
func (mr *MockCheckServiceMockRecorder) Health(ctx, req, rsp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockCheckService)(nil).Health), ctx, req, rsp)
}

// GetHealth mocks base method
func (m *MockCheckService) GetHealth(ctx context.Context, req *HealthRequest, rsp *HealthReply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealth", ctx, req, rsp)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetHealth indicates an expected call of GetHealth
func (mr *MockCheckServiceMockRecorder) GetHealth(ctx, req, rsp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealth", reflect.TypeOf((*MockCheckService)(nil).GetHealth), ctx, req, rsp)
}

// MockCheckClientProxy is a mock of CheckClientProxy interface
type MockCheckClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockCheckClientProxyMockRecorder
}

// MockCheckClientProxyMockRecorder is the mock recorder for MockCheckClientProxy
type MockCheckClientProxyMockRecorder struct {
	mock *MockCheckClientProxy
}

// NewMockCheckClientProxy creates a new mock instance
func NewMockCheckClientProxy(ctrl *gomock.Controller) *MockCheckClientProxy {
	mock := &MockCheckClientProxy{ctrl: ctrl}
	mock.recorder = &MockCheckClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCheckClientProxy) EXPECT() *MockCheckClientProxyMockRecorder {
	return m.recorder
}

// Health mocks base method
func (m *MockCheckClientProxy) Health(ctx context.Context, req *HealthRequest, opts ...client.Option) (*HealthReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Health", varargs...)
	ret0, _ := ret[0].(*HealthReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health
func (mr *MockCheckClientProxyMockRecorder) Health(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockCheckClientProxy)(nil).Health), varargs...)
}

// GetHealth mocks base method
func (m *MockCheckClientProxy) GetHealth(ctx context.Context, req *HealthRequest, opts ...client.Option) (*HealthReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHealth", varargs...)
	ret0, _ := ret[0].(*HealthReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealth indicates an expected call of GetHealth
func (mr *MockCheckClientProxyMockRecorder) GetHealth(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealth", reflect.TypeOf((*MockCheckClientProxy)(nil).GetHealth), varargs...)
}
