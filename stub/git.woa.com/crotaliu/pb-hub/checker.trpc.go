// Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
// source: checker.proto

package pb_hub

import (
	"context"
	"fmt"

	_ "git.code.oa.com/trpc-go/trpc-go"
	_ "git.code.oa.com/trpc-go/trpc-go/http"

	"git.code.oa.com/trpc-go/trpc-go/client"
	"git.code.oa.com/trpc-go/trpc-go/codec"
	"git.code.oa.com/trpc-go/trpc-go/server"
)

/* ************************************ Service Definition ************************************ */

// CheckService defines service
type CheckService interface {

	// Check 检查脚本存活
	Check(ctx context.Context, req *HealthRequest, rsp *HealthReply) (err error)

	// Health 检查进程和文件存活
	Health(ctx context.Context, req *HealthRequest, rsp *HealthReply) (err error)

	// GetHealth 调用探活接口
	GetHealth(ctx context.Context, req *HealthRequest, rsp *HealthReply) (err error)
}

func CheckService_Check_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &HealthRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(CheckService).Check(ctx, reqbody.(*HealthRequest), rspbody.(*HealthReply))
	}

	rsp := &HealthReply{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func CheckService_Health_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &HealthRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(CheckService).Health(ctx, reqbody.(*HealthRequest), rspbody.(*HealthReply))
	}

	rsp := &HealthReply{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func CheckService_GetHealth_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &HealthRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(CheckService).GetHealth(ctx, reqbody.(*HealthRequest), rspbody.(*HealthReply))
	}

	rsp := &HealthReply{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// CheckServer_ServiceDesc descriptor for server.RegisterService
var CheckServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.checker.checkHealth.Check",
	HandlerType: ((*CheckService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.checker.checkHealth.Check/Check",
			Func: CheckService_Check_Handler,
		},
		{
			Name: "/trpc.checker.checkHealth.Check/Health",
			Func: CheckService_Health_Handler,
		},
		{
			Name: "/trpc.checker.checkHealth.Check/GetHealth",
			Func: CheckService_GetHealth_Handler,
		},
	},
}

// RegisterCheckService register service
func RegisterCheckService(s server.Service, svr CheckService) {
	if err := s.Register(&CheckServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Check register error:%v", err))
	}

}

/* ************************************ Client Definition ************************************ */

// CheckClientProxy defines service client proxy
type CheckClientProxy interface {

	// Check 检查脚本存活
	Check(ctx context.Context, req *HealthRequest, opts ...client.Option) (rsp *HealthReply, err error)

	// Health 检查进程和文件存活
	Health(ctx context.Context, req *HealthRequest, opts ...client.Option) (rsp *HealthReply, err error)

	// GetHealth 调用探活接口
	GetHealth(ctx context.Context, req *HealthRequest, opts ...client.Option) (rsp *HealthReply, err error)
}

type CheckClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewCheckClientProxy = func(opts ...client.Option) CheckClientProxy {
	return &CheckClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *CheckClientProxyImpl) Check(ctx context.Context, req *HealthRequest, opts ...client.Option) (*HealthReply, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/trpc.checker.checkHealth.Check/Check")
	msg.WithCalleeServiceName(CheckServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("checker")
	msg.WithCalleeServer("checkHealth")
	msg.WithCalleeService("Check")
	msg.WithCalleeMethod("Check")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &HealthReply{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *CheckClientProxyImpl) Health(ctx context.Context, req *HealthRequest, opts ...client.Option) (*HealthReply, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/trpc.checker.checkHealth.Check/Health")
	msg.WithCalleeServiceName(CheckServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("checker")
	msg.WithCalleeServer("checkHealth")
	msg.WithCalleeService("Check")
	msg.WithCalleeMethod("Health")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &HealthReply{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *CheckClientProxyImpl) GetHealth(ctx context.Context, req *HealthRequest, opts ...client.Option) (*HealthReply, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/trpc.checker.checkHealth.Check/GetHealth")
	msg.WithCalleeServiceName(CheckServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("checker")
	msg.WithCalleeServer("checkHealth")
	msg.WithCalleeService("Check")
	msg.WithCalleeMethod("GetHealth")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &HealthReply{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}
